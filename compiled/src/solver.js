// Generated by CoffeeScript 1.9.3
(function() {
  window.xcountNQueensSolutions = function(n) {
    var board, count, innerRecurse;
    board = new Board({
      n: n
    });
    count = 0;
    innerRecurse = function(row) {
      var i;
      i = 0;
      while (i < n) {
        board.rows()[row][i] = 1;
        if (!board.hasAnyQueensConflicts()) {
          if (row === n - 1) {
            count += 1;
            board.rows()[row][i] = 0;
          } else {
            innerRecurse(row + 1);
            board.rows()[row][i] = 0;
          }
        } else {
          board.rows()[row][i] = 0;
        }
        i++;
      }
    };
    if (n === 0) {
      return 1;
    }
    innerRecurse(0);
    console.log('Number of solutions for ' + n + ' queens:', count);
    return count;
  };

  window.countNQueensSolutions = function(n) {
    var all, count, innerRecurse;
    count = 0;
    all = Math.pow(2, n) - 1;
    innerRecurse = function(l, c, r) {
      var bit, poss;
      if (c === all) {
        count++;
        return;
      }
      poss = ~(l | c | r) & all;
      while (poss) {
        bit = poss & -poss;
        poss -= bit;
        innerRecurse((l | bit) >> 1, c | bit, (r | bit) << 1);
      }
    };
    innerRecurse(0, 0, 0);
    console.log('Number of solutions for ' + n + ' queens:', count);
    return count;
  };

}).call(this);

//# sourceMappingURL=solver.js.map
