// Generated by CoffeeScript 1.9.3
(function() {
  describe('Board', function() {
    var capitalize, verifyConflictTypes;
    capitalize = function(word) {
      return word[0].toUpperCase() + word.slice(1);
    };
    verifyConflictTypes = function(expectedConflicts, matrix) {
      var board;
      board = new Board(matrix);
      _.map('row col rooks majorDiagonal minorDiagonal queens'.split(' '), function(conflictType) {
        var conflictDetected, conflictExpected, message;
        conflictDetected = board['hasAny' + capitalize(conflictType) + 'Conflicts']();
        conflictExpected = _(expectedConflicts).contains(conflictType);
        message = conflictExpected ? 'should' : 'should not';
        it(message + ' find a ' + conflictType + ' conflict', function() {
          expect(conflictDetected).to.be.equal(conflictExpected);
        });
      });
    };
    describe('Empty board', function() {
      verifyConflictTypes([''], [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);
    });
    describe('Board with row conflicts', function() {
      verifyConflictTypes(['row', 'rooks', 'queens'], [[0, 0, 0, 0], [1, 1, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);
    });
    describe('Board with col conflicts', function() {
      verifyConflictTypes(['col', 'rooks', 'queens'], [[1, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]);
    });
    describe('Board with major diagonal conflicts', function() {
      verifyConflictTypes(['majorDiagonal', 'queens'], [[0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 0], [0, 0, 0, 0]]);
    });
    describe('Board with minor diagonal conflicts', function() {
      verifyConflictTypes(['minorDiagonal', 'queens'], [[0, 0, 1, 0], [0, 0, 0, 0], [1, 0, 0, 0], [0, 0, 0, 0]]);
    });
  });

}).call(this);

//# sourceMappingURL=BoardSpec.js.map
